"""
Файл с промптами для генераторов задач по математике.
Содержит промпты для Yandex API и локальной модели.
"""

#############################################################
# 1. ШАБЛОНЫ ОБЩИХ ИНСТРУКЦИЙ
#############################################################

# Общие инструкции о сохранении типа задачи
TASK_TYPE_PRESERVATION = """
ВАЖНО О СОХРАНЕНИИ ТИПА ЗАДАЧИ: Строго сохраняйте тип и основные элементы исходной задачи:
1. Если в исходной задаче есть модуль - новая задача ОБЯЗАТЕЛЬНО должна содержать модуль.
2. Если это логарифмическое уравнение - новая задача должна быть логарифмическим уравнением.
3. Если это задача на применение производной - сохраните этот контекст.
4. НЕ МЕНЯЙТЕ тип и ключевые элементы задачи, меняйте только числа и условия.
5. Сохраните уровень сложности и основную идею исходной задачи
6. Задача должна соответствовать уровню ЕГЭ, а не быть тривиальной
7. Создавайте задачи средней или высокой сложности, соответствующие кодификатору ЕГЭ.

Примеры правильного и неправильного сохранения типа задачи:
✓ Было: Задача из категории "Уравнения" и подкатегории "Уравнения с модулем" с модулем. "Решите уравнение |2x - 3| = 5". Стало: "Решите уравнение |3x - 2| = 4".
✗ Было: "Решите уравнение |2x - 3| = 5". Стало: "Решите уравнение 3x - 2 = 4".
✓ Было: "Найдите наибольшее значение функции f(x) = x² + 6x + 2 на отрезке [-4; 0]". Стало: "Найдите наибольшее значение функции f(x) = x² + 4x + 3 на отрезке [-3; 1]".
✗ Было: "Найдите наибольшее значение функции". Стало: "Найдите точку экстремума функции".
"""

# Общие инструкции о числах
NUMBERS_GUIDANCE = """
ВАЖНО О ЧИСЛАХ: Подбирайте числа так, чтобы получался "красивый" и удобный для ученика ответ:
1. Предпочтительны целые числа или простые дроби (1/2, 3/4, 2/3).
2. Избегайте громоздких выражений вида log₂(123 + √5445) + 2/5.
3. Корни лучше подбирать из квадратов целых чисел (√4, √9, √16).
4. Тригонометрические ответы по возможности выражайте через π (π/3, π/6, 3π/4).

Примеры хороших и плохих ответов:
✓ Хороший ответ: 5/2 или 2,5
✗ Плохой ответ: 103/41 или 2,512195...
✓ Хороший ответ: $\\sqrt{8} = 2 * \\sqrt{2}$
✗ Плохой ответ: $\\sqrt{38}$
✓ Хороший ответ: $\\pi/4$
✗ Плохой ответ: $0.785398...$
"""

# Общие требования к разнообразию задач
TASK_DIVERSITY = """
РАЗНООБРАЗИЕ Создавайте действительно разнообразные задачи:
1. Меняйте то, что требуется найти (например, вместо периметра — площадь, высоту или диагональ)
2. Добавляйте или заменяйте условия (вместо основания и острого угла — основание и тупой угол; или диагонали)
3. Меняйте тип трапеции (равнобедренная, прямоугольная)
4. Используйте разные подходы (геометрический, тригонометрический, координатный)
5. Вводите дополнительные элементы (вписанную окружность, описанную окружность)
6. Меняйте числа, операторы, структуру, но оставляйтесь в рамке решаемости задачи и темы.
"""

# Общие требования к математической точности
MATHEMATICAL_PRECISION = """
МАТЕМАТИЧЕСКАЯ ТОЧНОСТЬ:
- Тщательно проверяйте все расчеты и математические формулировки
- Следите за корректностью использования математических терминов и обозначений
- Обеспечивайте однозначность условий и единственность решения (если не требуется обратное)
- Используйте стандартные математические обозначения, принятые в российском образовании
"""

# Требования к задачам
TASK_REQUIREMENTS = """
ТРЕБОВАНИЯ К ЗАДАЧАМ:
- Создавайте задачи, точно соответствующие категории и подкатегории в кодификаторе ЕГЭ
- Уровень сложности должен соответствовать формату ЕГЭ (не примитивный, но и не выходящий за рамки школьной программы российский школ)
- Предпочитайте задачи с "красивыми" числовыми ответами: целые числа, простые дроби (1/2, 3/4), 
  квадратные корни из целых чисел (√4, √9), тригонометрические значения в виде π/n
- Проверяйте условия на однозначность и отсутствие противоречий.
"""

# Требования к структуре решений
SOLUTION_STRUCTURE = """
СТРУКТУРА РЕШЕНИЙ:
- Решение должно полностью соответствовать условию задачи
- Разбивайте решение на логические шаги с обоснованием
- Поясняйте каждое преобразование и вычисление
- Указывайте применяемые теоремы, формулы и правила
- Завершайте решение четким ответом в требуемом формате, если в задаче преполагается несколько ответов, то укажите все ответы по пунктам или через запятую.
"""

# Принципы разработки подсказок
HINT_PRINCIPLES = """
ПРИНЦИПЫ РАЗРАБОТКИ ПОДСКАЗОК:
1. КОНКРЕТНОСТЬ: Каждая подсказка должна содержать специфическую информацию для конкретной задачи (числа, переменные, функции из условия)
2. ПРИРАЩЕНИЕ ИНФОРМАЦИИ: Каждая последующая подсказка должна содержать строго больше информации, чем предыдущая
3. СИСТЕМНОСТЬ: Подсказки должны формировать единую логическую цепочку, ведущую к решению
4. ИНИЦИИРОВАНИЕ МЫШЛЕНИЯ: Подсказки должны стимулировать самостоятельное мышление, а не просто давать готовые решения

ИЗБЕГАЙТЕ:
- Общих фраз без привязки к конкретным элементам задачи
- Повторения одной и той же информации в разных подсказках
- Слишком резких переходов между уровнями сложности подсказок
- Избыточного раскрытия решения на ранних уровнях подсказок
"""

# Форматирование текста
TEXT_FORMATTING = """
ВАЖНО: для форматирования используйте HTML теги вместо Markdown. Например:
- Для выделения жирным используйте <b>текст</b> вместо **текст**
- Для курсива используйте <i>текст</i> вместо *текст*
- Для переносов строк добавляйте <br> или <p>новый параграф</p>

Для математических формул продолжайте использовать LaTeX между символами $ для простых формул или $$ для сложных.
"""

# Описания уровней подсказок для различных функций
HINT_DESCRIPTIONS = {
    1: "минимальные, указывающие только на конкретные элементы задачи без методов решения, будто подсказываешь олимпиаднику",
    2: "краткие, указывающие на конкретный метод решения с привязкой к данным задачи, будто подсказываешь отличнику",
    3: "средние, с указанием ключевых формул и начальных шагов вычислений для данной задачи, будто подсказываешь хорошисту",
    4: "подробные, с детальными шагами решения и числовыми вычислениями, будто подсказываешь двоичнику",
    5: "максимально подробные, включающие пошаговое решение почти до финального ответа, будто подсказываешь ученику, который только начинает изучать математику"
}

# Описания уровней подсказок для hints_prompt
HINT_DESCRIPTION_DETAILS = {
    1: "минимальные подсказки, но всё равно относящиеся к конкретной задаче",
    2: "краткие подсказки с указанием конкретного метода для этой задачи",
    3: "подробные подсказки среднего уровня с указанием формул и начальных шагов конкретно для этой задачи (3-5 предложений)",
    4: "развернутые подсказки с конкретными вычислениями и значениями из задачи (4-6 предложений)",
    5: "максимально подробное пошаговое решение из нескольких абзацев, практически полностью раскрывающее ответ"
}

#############################################################
# 2. СИСТЕМНЫЕ ПРОМПТЫ
#############################################################

# Системный промпт для Yandex API
SYSTEM_PROMPT = """Вы - опытный преподаватель математики, специализирующийся на подготовке к ЕГЭ. Вы создаете новые варианты задач, сохраняя при этом исходный уровень сложности и методы решения. 

- Ваши задачи могут быть не похожи на примеры, но ГЛАВНОЕ, чтобы сохранялся тип задачи. 
- Используйте только целые числа, простые дроби и корни из целых чисел.
- Ваши решения должны быть подробными и пошаговыми, с объяснением каждого действия.
- Задачи должны соответствовать уровню ЕГЭ по математике.
- Создавайте задачи средней или высокой сложности, соответствующие кодификатору ЕГЭ.

Давайте точные и краткие ответы без лишних пояснений. Даже, если что-то не понятно в условии, то всё равно надо дать полный ответ - дополнительных пояснений не будет."""

# Системный промпт для hint_generator.py
HINT_SYSTEM_PROMPT = "Вы - опытный преподаватель математики, специализирующийся на подготовке к ЕГЭ. Ваша задача - давать последовательные, конкретные и полезные подсказки для решения задачи, привязанные к её условию и помогающие ученику продвинуться в решении. Подсказки должны содержать конкретные элементы из задачи (числа, переменные, функции). Формулируйте подсказки точно и без лишних отступлений."

#############################################################
# 3. ГЕНЕРАЦИЯ ЗАДАЧ
#############################################################

# Промпт для генерации полного материала с YandexGPT API
def create_complete_task_prompt(category, subcategory, original_task, difficulty_level=3, add_visualization=None):
    """
    Создает промпт для генерации полного учебного материала.
    
    Args:
        category: Категория задачи
        subcategory: Подкатегория задачи
        original_task: Текст исходной задачи
        difficulty_level: Уровень подсказок (1-5, где 1 - минимальные, 5 - очень подробные)
        add_visualization: Добавлять ли визуализацию (True/False)
        
    Returns:
        str: Промпт для генерации
    """
    # Получаем инструкции для подсказок соответствующего уровня
    hint_instructions = HINT_PROMPTS.get(difficulty_level, "")
    
    # Описание уровня подсказок для промпта
    hint_description = HINT_DESCRIPTIONS.get(difficulty_level, "средние")
    
    # Определяем, нужно ли добавлять запрос о генерации параметров для изображения
    image_prompt = ""
    
    # Проверяем, требуется ли визуализация для данной задачи
    if add_visualization is None:
        # Если параметр не задан явно, определяем автоматически
        is_visualization_required = check_visualization_requirement(category, subcategory, original_task)
    else:
        # Используем переданное значение параметра
        is_visualization_required = add_visualization
    
    if is_visualization_required:
        image_prompt = """
---ПАРАМЕТРЫ ДЛЯ ВИЗУАЛИЗАЦИИ---
ВАЖНО: Определите автоматически, нужна ли визуализация для данной задачи. Это можно определять по словам "на рисунке изображен" или подобным.

КРИТИЧЕСКИ ВАЖНО: В параметрах визуализации указывайте ИСКЛЮЧИТЕЛЬНО те элементы, которые явно упомянуты в тексте задачи числом или конкретным значением. Например, если в задаче сказано только "острый угол равен 60°", в параметре "Углы" укажите ТОЛЬКО [60, -, -, -], а НЕ [60, 60, 120, 120]. Если высота не указана явно числом, оставьте параметр "Высота" пустым или "-". Никогда не выводите значения, которые можно вычислить, но они не указаны в тексте задачи напрямую.
Если визуализация НЕ требуется, напишите только "Визуализация не требуется" и не добавляйте никаких параметров.

Параметры для визулизации используются только для отображения определенных элементов задачи, для построения используется только тип и параметры "Показать ...". Если в задаче не указана прямым текстом длина какого-то элемента(например, высоты), то не нужно указывать длину этого элемента.

Параметры для визуализации надо указывать ТОЛЬКО те, которые прямым текстом указаны в условии задачи. Если в задаче указано, что "проведена высота AM", то только тогда нужно указать параметр "Показать высоты"

Если визуализация требуется, укажите её тип и параметры в следующем формате:

Тип: [график, треугольник, окружность, прямоугольник, трапеция, параллелограмм, координатная_плоскость]

Для графика функции:
Количество функций: [указать от 1 до 4]
Функция 1: [математическое выражение, например: x^2 - 3*x + 2, sin(x), sqrt(x)]
Цвет 1: [цвет для первой функции]
Название 1: [название или обозначение для первой функции]
Функция 2: [математическое выражение для второй функции] (если есть)
Цвет 2: [цвет для второй функции] (если есть)
Название 2: [название для второй функции] (если есть)
Функция 3: [математическое выражение для третьей функции] (если есть)
Цвет 3: [цвет для третьей функции] (если есть)
Название 3: [название для третьей функции] (если есть)
Функция 4: [математическое выражение для четвертой функции] (если есть)
Цвет 4: [цвет для четвертой функции] (если есть)
Название 4: [название для четвертой функции] (если есть)
Диапазон X: [-10, 10] или другой подходящий диапазон, такой, что все элементы графика будут видны
Диапазон Y: [автоматический или указать конкретные значения], такой, что все элементы графика будут видны
Особые точки: [(x1,y1,метка1), (x2,y2,метка2), ...] - только числовые координаты особых точек, если они есть

Для треугольника:
Метки вершин: [A,B,C или другие метки]
Стороны: [длина1, длина2, длина3] - длины сторон, "-" если сторона не указана прямым текстом
Углы: [угол1, угол2, угол3] - величины углов в градусах, "-" если угол не указан прямым текстом
Показать высоты: [из каких вершин, например: A,B]
Показать медианы: [из каких вершин, например: A,C]
Показать средние линии: [какие, например: AB,BC]
Показать биссектрисы: [из каких вершин, например: A]
Значения биссектрис: [значение1, значение2, значение3] - значения биссектрис, "-" если не указаны

Для окружности:
Радиус: [число]
Значение радиуса: [число для отображения]
Значение диаметра: [число для отображения] (если нужно)
Значение хорды: [число для отображения] (если нужно)

Для прямоугольника:
Размеры: [ширина, высота]
Метки вершин: [A,B,C,D]
Стороны: [AB,BC] - какие стороны подписать
Показать диагонали: [true/false]
Длины диагоналей: [длина1, длина2]

Для параллелограмма:
Размеры: [ширина, высота]
Метки вершин: [A,B,C,D]
Стороны: [длина1, длина2, длина3, длина4]
Углы: [угол1, угол2] - смежные углы в градусах

Для трапеции:
Основания: [нижнее, верхнее]
Высота: [число]
Метки вершин: [A,B,C,D]
Боковые стороны: [длина1, длина2]
Углы: [угол1, угол2, угол3, угол4] - величины углов в градусах
Показать высоту: [true/false]
Значение высоты: [число для отображения], если не указано, то "-"
Показать среднюю линию: [true/false]
Значение средней линии: [число для отображения], если не указано, то "-"

Для координатной плоскости:
Точки: [(x1,y1,метка1), (x2,y2,метка2), ...]
Векторы: [(x1,y1,x2,y2,метка), ...] - координаты начала и конца, метка
"""
    
    # Добавляем явную инструкцию о соблюдении категории и подкатегории
    category_emphasis = f"""
ОБЯЗАТЕЛЬНО СОЗДАЙТЕ ЗАДАЧУ ТОЛЬКО ПО КАТЕГОРИИ "{category}" {"И ПОДКАТЕГОРИИ " + subcategory if subcategory else ""}.
ИГНОРИРУЙТЕ любые примеры задач, которые не соответствуют этой категории.
Ваша задача ДОЛЖНА относиться именно к этой категории и подкатегории, а не к другим темам математики.
"""
    
    # Основной промпт с использованием шаблонов
    prompt = f"""
Вы - высококвалифицированный репетитор ЕГЭ по математике с многолетним опытом подготовки учащихся к успешной сдаче экзамена.

{category_emphasis}

Создайте полный учебный материал - задачу, решение, подсказки для ЕГЭ по математике из категории "{category}" {"и подкатегории " + subcategory if subcategory else ""}.
### ПРИМЕРЫ ЗАДАЧИ В HTML или текстовом формате(МОЖЕТ ОТСУТСТВОВАТЬ) ###

---ЗАДАЧА ДЛЯ ПЕРЕРАБОТКИ---
{original_task}
---КОНЕЦ ИСХОДНЫХ ДАННЫХ---

### ТРЕБОВАНИЯ ###

{TASK_DIVERSITY}

{MATHEMATICAL_PRECISION}

{TASK_REQUIREMENTS}

{SOLUTION_STRUCTURE}

{TASK_TYPE_PRESERVATION}

Создайте новый вариант задачи, изменив числовые параметры, условия или сюжет, но сохраняя подобный уровень сложности и метод решения.

{NUMBERS_GUIDANCE}

{TEXT_FORMATTING}

ВАЖНО: текст решения должен быть содержательным и полным. Обязательно включите все шаги решения, не пропуская логические переходы. Без решения материал не имеет ценности.

ПРИНЦИПЫ РАЗРАБОТКИ ПОДСКАЗОК: выбран уровень подсказок {difficulty_level} - подсказки должны быть {hint_description}.
{HINT_PRINCIPLES}

Ваш ответ должен строго соответствовать следующему формату:
---ЗАДАЧА---
[Текст новой задачи]

{image_prompt}

---РЕШЕНИЕ---
[Полное пошаговое решение с пояснениями]
В самом конце решения обязательно запишите полный(если там несколько пунктов в условии, то нужен ответ на каждый пункт в конце, например "1) ответ, 2) ответ, 3) ответ") итоговый ответ на поставленный вопрос в формате:
Ответ: [ответ] (с формулами в формате LaTeX между символами $...$)

{hint_instructions}
"""

    return prompt

# Промпт для генерации новой задачи для локальной модели
def create_new_task_prompt(original_task, original_solution, category, subcategory=""):
    """
    Создает промпт для генерации новой задачи на основе оригинальной.
    
    Args:
        original_task: Текст оригинальной задачи
        original_solution: Решение оригинальной задачи
        category: Категория задачи
        subcategory: Подкатегория задачи (опционально)
        
    Returns:
        str: Промпт для генерации
    """
    return f"""
Сгенерируй новую математическую задачу из ЕГЭ из категории "{category}" 
{"и подкатегории " + subcategory if subcategory else ""}, похожую на данную:

Исходная задача: {original_task}

Исходное решение: {original_solution}

{TASK_TYPE_PRESERVATION.strip()}

{NUMBERS_GUIDANCE.strip()}

Примеры:
✓ Хороший ответ: 7
✗ Плохой ответ: 7,42856...
✓ Хороший ответ: π/6
✗ Плохой ответ: 0,5236...

Создай новый вариант этой задачи, изменив числовые параметры, условия или сюжет, 
но сохраняя подобный уровень сложности и метод решения. 
Убедись, что задача имеет корректное решение(не допускай ответ "нет решений") и выполнима.
Математические формулы запиши в формате LaTeX между символами $$...$$

Новая задача:
"""

#############################################################
# 4. ГЕНЕРАЦИЯ РЕШЕНИЙ
#############################################################

# Промпт для генерации решения
def create_solution_prompt(task):
    """
    Создает промпт для генерации решения задачи.
    
    Args:
        task: Текст задачи
        
    Returns:
        str: Промпт для генерации
    """
    return f"""
Решите следующую математическую задачу из ЕГЭ:

{task}

ВАЖНО О РЕШЕНИИ:
1. Предоставьте полное пошаговое решение с пояснениями.
2. Разделите решение на логические этапы.
3. Объясняйте каждый шаг, особенно при применении формул и теорем.

Пример хорошего решения для задачи *Условие задачи*:
"Шаг 1:
Шаг 2:
Шаг 3:
Шаг 4:
Шаг 5:
Шаг 7:
Шаг 8:
Ответ:
"

{NUMBERS_GUIDANCE.strip()}

Примеры упрощения:
✓ √12 = 2√3 (упрощено)
✗ √12 = 3,464... (не упрощено)
✓ log₂(8) = 3 (вычислено)
✗ log₂(8) (не вычислено)
✓ sin(π/6) = 1/2 (вычислено)
✗ sin(π/6) ≈ 0,5 (неточно вычислено)

Математические формулы запишите в формате LaTeX между символами $$...$$
В конце обязательно укажите итоговый ответ в наиболее упрощенной форме.

Решение:
"""

#############################################################
# 5. ГЕНЕРАЦИЯ ПОДСКАЗОК
#############################################################

# Словарь с готовыми инструкциями для подсказок разных уровней
HINT_PROMPTS = {
    0: """
---ПОДСКАЗКИ---
1. Для данного уровня подсказки не предусмотрены.
2. Для данного уровня подсказки не предусмотрены.
3. Для данного уровня подсказки не предусмотрены.
""",
    1: """
---ПОДСКАЗКИ---
[Уровень 1: Направляющие подсказки.
Первая подсказка должна обращать внимание на ключевой элемент условия задачи, но НЕ указывать метод решения. Используйте фразы вроде "Обратите внимание на...", "Важно заметить, что...", "Ключевой момент задачи...". Длина: 1-2 предложения.

Вторая подсказка должна содержать одну основную формулу или свойство, необходимое для начала решения. Упомяните ТОЛЬКО самое основное без объяснения как это применять. Длина: 1-2 предложения.

Третья подсказка должна содержать очень краткий намёк на первый шаг решения, без раскрытия всего плана. Используйте фразы вроде "Попробуйте начать с...", "Хорошей отправной точкой будет...". Длина: 1-2 предложения.]

1. Обратите внимание на ключевые числа и соотношения в условии задачи. [Укажите конкретные элементы из условия]

2. Напомню, что для задач данного типа применяется следующее свойство: [укажите конкретное свойство, формулу или определение, относящееся к задаче]

3. Для решения начните с [укажите конкретное действие для первого шага, используя данные из задачи].

Это пример структуры подсказок. Вы можете использовать другой формат, главное, чтобы подсказки были конкретными, понятными и соответствовали уровню сложности.

ВАЖНО: Адаптируйте эти подсказки к конкретной задаче с учетом её категории.
""",
    2: """
---ПОДСКАЗКИ---
[Уровень 2: Вспомогательные подсказки.
Первая подсказка должна чётко сформулировать суть задачи и обратить внимание на 1-2 ключевых момента условия. Используйте доступный язык и конкретные термины из условия. Длина: 2-3 предложения.

Вторая подсказка должна содержать основные формулы или свойства для решения с минимальным пояснением их связи с задачей. Можно добавить короткую фразу о том, как они применяются, но без конкретных шагов. Длина: 2-3 предложения.

Третья подсказка должна содержать структурированный план первых двух шагов решения без подробных вычислений. Используйте числа из задачи, но оставьте самостоятельное выполнение действий ученику. Длина: 3-4 предложения.]

1. В данной задаче требуется найти [укажите, что именно нужно найти по условию]. Обратите внимание на [конкретный элемент условия]. Также важно, что [второе ключевое наблюдение из условия].

2. При решении такого типа задач полезно использовать [формула или свойство]. Это связано с [кратко объясните связь со спецификой задачи]. Также может пригодиться [второе свойство или формула, если требуется].

3. Рекомендуемый план решения: сначала определите [что именно с конкретными значениями], затем [второй шаг с использованием значений из задачи]. Далее можно [намёк на третий шаг], что приведет вас к ответу.

Это пример структуры подсказок. Вы можете использовать другой формат, главное, чтобы подсказки были конкретными, понятными и соответствовали уровню сложности.

ВАЖНО: Адаптируйте эти подсказки к конкретной задаче с учетом её категории.
""",
    3: """
---ПОДСКАЗКИ---
[Уровень 3: Содержательные подсказки.
Первая подсказка должна дать полное понимание условия задачи, чётко указывая на все важные ограничения и особенности. Используйте структурированное объяснение с нумерацией ключевых моментов. Длина: 3-4 предложения.

Вторая подсказка должна содержать все необходимые формулы, свойства и методы с кратким объяснением их применения к данной задаче. Можно включить простой пример или аналогию для лучшего понимания. Длина: 4-5 предложений.

Третья подсказка должна предоставлять план решения задачи с указанием основных шагов и некоторыми промежуточными результатами. Укажите 3-4 конкретных шага с частичными вычислениями, но оставьте финальные расчёты ученику. Длина: 5-6 предложений.]

1. В этой задаче необходимо [сформулируйте цель задачи]. Важно учесть следующие моменты: 1) [первое ключевое ограничение с конкретными значениями]; 2) [второе ключевое условие]; 3) [третье условие или особенность]; 4) [четвертое условие, если есть].

2. Для решения можно использовать следующие теоретические положения: [основная формула или свойство с пояснением]. Эта формула применяется потому, что [причина применения к этой конкретной задаче]. Также полезно знать, что [второе свойство или формула]. Если представить ситуацию наглядно, то [приведите краткую аналогию или пример].

3. Решим задачу пошагово:
   - Шаг 1: [первый шаг с конкретными значениями из задачи, включая начало вычислений]
   - Шаг 2: [второй шаг с промежуточными результатами]
   - Шаг 3: [третий шаг с конкретными значениями]
   - Шаг 4: [описание последнего шага без финального результата]
   Теперь вам осталось [что именно нужно сделать ученику для завершения решения].

ВАЖНО: Создайте три подсказки, полностью относящиеся к конкретной задаче. Используйте числа, формулы и термины из условия задачи. НЕ копируйте шаблонные примеры. Адаптируйте подсказки к категории задачи.
""",
    4: """
---ПОДСКАЗКИ---
[Уровень 4: Подробные подсказки.
Первая подсказка должна содержать исчерпывающий анализ условия задачи с указанием всех нюансов, возможных подходов и ограничений. Разделите анализ на 3-4 логических пункта. Включите визуальный образ или аналогию, если это поможет понять задачу. Длина: 4-6 предложений.

Вторая подсказка должна предоставлять детальную теоретическую базу с объяснением всех необходимых формул и методов. Для каждого метода кратко укажите, как он применяется к данной задаче. Структурируйте информацию по пунктам. Длина: 6-8 предложений.

Третья подсказка должна содержать подробное решение задачи с большинством вычислений, но без финального ответа. Разбейте решение на этапы, для каждого приведите промежуточные вычисления. Укажите потенциальные трудности и способы их преодоления. Оставьте последнее действие или проверку ученику. Длина: 8-10 предложений.]

1. В задаче требуется [формулировка задачи]. Разберём условие детально: 1) [первый ключевой аспект с конкретными числами]; 2) [второй ключевой аспект]; 3) [третий ключевой аспект с ограничениями]; 4) [четвертый аспект или тонкость в условии]. Эту задачу можно представить как [аналогия или визуальный образ]. Важно заметить, что [нетривиальное наблюдение по условию].

2. Для решения применим следующие теоретические положения:
   - [Первая формула или свойство]: применяется к [конкретным элементам задачи] потому, что [объяснение].
   - [Вторая формула или свойство]: связывает [элементы задачи] следующим образом: [краткое объяснение].
   - [Третья формула или метод, если необходимо]: используется для [цель применения] и даёт [что получаем в результате].
   - [Четвертое свойство или следствие, если есть]: особенно важно учесть, потому что [причина].
   Все эти положения вместе позволяют [общий результат их применения к задаче].

3. Решим задачу подробно:
   - Шаг 1: [действие с конкретными числами и полными выкладками].
      Получаем: [промежуточный результат с вычислениями].
   - Шаг 2: [действие с использованием результата шага 1].
      Вычисляем: [выкладки с конкретными числами].
      Важно обратить внимание, что [пояснение сложного момента].
   - Шаг 3: [следующее действие с полными вычислениями].
      На этом этапе получаем: [детальный промежуточный результат].
   - Шаг 4: [предпоследний шаг с вычислениями].
      Здесь может возникнуть трудность с [что именно], которую преодолеваем так: [способ].
   
   Для завершения решения вам осталось [последнее действие, которое нужно выполнить ученику].

ВАЖНО: Адаптируйте эти подсказки к конкретной задаче с учетом её категории.
""",
    5: """
---ПОДСКАЗКИ---
[Уровень 5: Детальный разбор.
Первая подсказка должна представлять всесторонний анализ задачи, включающий все возможные интерпретации, нюансы и особенности. Разбейте анализ на 4-5 чётких пунктов с пояснениями. Включите наглядный пример или аналогию для лучшего понимания. Длина: 6-8 предложений.

Вторая подсказка должна содержать исчерпывающую теоретическую базу с объяснением всех формул, их происхождения и применимости к задаче. Для каждого метода дайте чёткое пояснение как и почему он работает. Структурируйте материал по параграфам с нумерацией ключевых положений. Длина: 8-10 предложений.

Третья подсказка должна представлять собой практически полное решение с подробными пошаговыми вычислениями, анализом всех вариантов и проверкой результатов. Разбейте решение на пронумерованные этапы с промежуточными результатами и пояснениями. Оставьте лишь минимальную работу ученику (финальное округление, подстановку или запись ответа). Включите проверку полученного результата. Длина: 10-12 предложений.]

1. В задаче требуется [подробная формулировка цели]. Проанализируем условие всесторонне:
   1) [первый аспект с детальным анализом и конкретными значениями];
   2) [второй аспект с пояснением его важности и связи с другими элементами];
   3) [третий аспект с потенциальными трудностями интерпретации];
   4) [четвертый аспект с нюансами и особенностями];
   5) [пятый аспект или обобщение, если необходимо].
   Эту задачу можно представить наглядно так: [развернутая аналогия или образное сравнение]. Понимание этой аналогии поможет увидеть, что [ключевое следствие аналогии].

2. Для решения этой задачи необходимо опираться на следующую теоретическую базу:
   
   1) [Первое ключевое теоретическое положение]: это положение утверждает, что [формулировка с пояснением]. Оно применимо в нашей задаче, потому что [детальное объяснение связи с условием].
   
   2) [Вторая теорема, формула или свойство]: математически записывается как [формула с объяснением каждого элемента]. История этой формулы связана с [краткая справка, если уместно]. В нашем случае она используется для [конкретное применение].
   
   3) [Третье правило или следствие]: является логическим продолжением [связь с предыдущими положениями]. Его применение даёт возможность [что именно позволяет сделать].
   
   4) [Четвертый метод или техника]: особенно полезен для [конкретная цель]. При использовании обратите внимание на [важный нюанс].
   
   Все эти теоретические положения вместе образуют комплексный подход к решению, позволяющий последовательно преодолеть все сложности задачи.

3. Решение задачи:

   Шаг 1: [Начальное действие с полной детализацией].
   Здесь мы используем [теоретическое положение из подсказки 2] и получаем:
   [Подробные выкладки с числами из условия и пояснениями каждого действия]
   В результате имеем: [конкретный промежуточный результат].
   
   Шаг 2: [Второе действие, опирающееся на результат шага 1].
   Применяем [формула или метод] следующим образом:
   [Детальные выкладки со всеми промежуточными вычислениями]
   После преобразований получаем: [результат с объяснением его значения].
   
   Шаг 3: [Третье действие с анализом возможных вариантов].
   На этом этапе возможны два варианта: [первый вариант] или [второй вариант].
   Рассмотрим оба:
   Для первого варианта: [выкладки и результат]
   Для второго варианта: [выкладки и результат]
   Сравнивая результаты, выбираем [обоснование выбора].
   
   Шаг 4: [Заключительный этап решения с полными вычислениями].
   Теперь остаётся [последнее действие] для получения ответа:
   [Подробные вычисления, почти до финального результата]
   
   Шаг 5: Проверка. Подставим полученный результат обратно в условие:
   [Подробная проверка, демонстрирующая корректность решения]
   
   Для окончательного ответа вам нужно лишь [простейшее завершающее действие].

Это пример структуры подсказок. Вы можете использовать другой формат, главное, чтобы подсказки были конкретными, понятными и соответствовали уровню сложности.

ВАЖНО: Адаптируйте эти подсказки к конкретной задаче с учетом её категории.
"""
}

# Промпт для генерации подсказок
def create_hints_prompt(task, solution, difficulty_level=3):
    """
    Создает промпт для генерации подсказок.
    
    Args:
        task: Текст задачи
        solution: Полное решение задачи
        difficulty_level: Уровень сложности подсказок (1-5)
        
    Returns:
        str: Промпт для генерации
    """
    # Преобразуем уровень сложности в описание для промпта
    hint_description = HINT_DESCRIPTION_DETAILS.get(difficulty_level, "средние подсказки")

    return f"""
Создайте 3 последовательные подсказки для решения конкретной математической задачи ЕГЭ:

Задача: {task}

Полное решение: {solution}

Уровень подсказок: {difficulty_level} (по шкале от 1 до 5)

ВАЖНО: Избегайте общих рекомендаций! Используйте КОНКРЕТНЫЕ элементы из задачи (числа, переменные, функции). 
НЕ ДАВАЙТЕ подсказки вида "подумайте о применении теоремы Виета" или "используйте метод интервалов" - вместо этого привязывайте подсказки к конкретным данным задачи!

КРИТИЧЕСКИ ВАЖНО: Создавайте подсказки только для данной конкретной задачи. НЕ КОПИРУЙТЕ примеры подсказок из других источников, не используйте шаблонные примеры. Ваши подсказки должны быть уникальными и относиться именно к этой конкретной задаче.

СТРУКТУРА ПОДСКАЗОК: Соблюдайте следующую структуру подсказок в зависимости от уровня:

- Уровень 1 (минимальные подсказки):
  Подсказка 1: Обратите внимание на ключевые элементы условия задачи
  Подсказка 2: Напомните о применимом свойстве или формуле
  Подсказка 3: Укажите на первый шаг решения

- Уровень 2 (краткие подсказки):
  Подсказка 1: Сформулируйте суть задачи и выделите 1-2 ключевых момента
  Подсказка 2: Укажите основные формулы/свойства с минимальным пояснением
  Подсказка 3: Дайте структурированный план первых двух шагов

- Уровень 3 (подробные подсказки):
  Подсказка 1: Дайте полное понимание условия с нумерацией ключевых моментов
  Подсказка 2: Предоставьте все необходимые формулы с объяснением применения
  Подсказка 3: Предложите план решения с промежуточными результатами

- Уровень 4 (детальные подсказки):
  Подсказка 1: Проведите исчерпывающий анализ условия с нюансами
  Подсказка 2: Дайте детальную теоретическую базу с пунктами применения
  Подсказка 3: Представьте подробное решение до предпоследнего шага

- Уровень 5 (максимально подробные подсказки):
  Подсказка 1: Сделайте всесторонний анализ с 4-5 пунктами и аналогией
  Подсказка 2: Изложите исчерпывающую теоретическую базу с историей и связями
  Подсказка 3: Дайте практически полное решение с проверкой результата

ВАЖНО: Это примеры структуры подсказок, а не жесткие шаблоны. Сами подсказки могут иметь другую структуру, но главное, чтобы они были:
1. Удобно структурированы - с четким разделением на логические части
2. Легко читаемы - с ясными формулировками и понятной терминологией
3. Достаточно подробны для соответствующего уровня подсказок
4. Адаптированы под конкретную задачу и её категорию

Требуется создать {hint_description}.
{HINT_PRINCIPLES.strip()}

Чем выше число (от 1 до 5), тем более подробными должны быть подсказки:
- Уровень 1: минимальные подсказки, но с упоминанием конкретных значений из задачи
  Пример: "Обратите внимание, что коэффиценты *числителя слева* и *знаменателя справа* совпадают в уравнении" вместо "Посмотрите на коэффициенты в уравнении"
- Уровень 3: подробные подсказки из 3-5 предложений с конкретными шагами
- Уровень 5: почти полное решение с конкретными вычислениями, разбитое на несколько абзацев

ВАЖНО О КОЛИЧЕСТВЕ ТЕКСТА:
- Для уровней 1-2: короткие подсказки из 3-4 предложения 
- Для уровней 3-4: развернутые подсказки из 5-10 предложений
- Для уровня 5: полноценные абзацы с подробными объяснениями и вычислениями

Подсказки должны создавать последовательную цепочку, раскрывая ход решения:
1. Первая подсказка: выделение ключевых элементов условия задачи, чтобы любой школьник мог правильно понять условие задачи, а также начальное наблюдение или первый шаг, привязанный к конкретным элементам задачи
2. Вторая подсказка: существенное продвижение в решении с формулами и конкретными значениями
3. Третья подсказка: предпоследний шаг решения, оставляющий ученику минимальную работу

Подсказки (разделенные ###):
"""

def check_visualization_requirement(category, subcategory, original_task=None):
    """
    Enhanced function to detect when visualization is needed.
    
    Args:
        category: Категория задачи
        subcategory: Подкатегория задачи
        original_task: Текст задачи (опционально для дополнительного анализа)
        
    Returns:
        bool: True, если требуется визуализация, иначе False
    """
    
    # Categories that always require visualization
    visualization_categories = {
        # Geometry categories
        "Векторы", "Планиметрия", "Стереометрия", "Планиметрическая задача",
        "Многоконфигурационная планиметрическая задача", "Сложная планиметрия",
        "Стереометрическая задача", "Квадратная решётка, координатная плоскость",
        "Геометрия", "Треугольники", "Окружности", "Многоугольники", "Фигуры на плоскости",
        
        # Graph categories 
        "Графики функций", "Чтение графиков и диаграмм", "Производная и первообразная", "Анализ графиков и диаграмм",
        
        # Additional categories that might need visualization
        "Задача с параметром", "Наибольшее и наименьшее значение функций"
    }
    
    # Подкатегории, требующие визуализации
    visualization_subcategories = {
        "планиметрия", "стереометрия", "треугольник", "окружность", 
        "параллелограмм", "трапеция", "многоугольник", "векторы",
        "координатная плоскость", "график", "квадрат", "прямоугольник",
        "геометрия", "конус", "пирамида", "цилиндр", "шар", "призма"
    }
    
    # Проверяем наличие категории в списке категорий, требующих визуализацию
    for viz_category in visualization_categories:
        if viz_category.lower() in category.lower():
            return True
    
    # Проверяем наличие подкатегории в списке подкатегорий, требующих визуализацию
    if subcategory:
        for viz_subcategory in visualization_subcategories:
            if viz_subcategory.lower() in subcategory.lower():
                return True
    
    # Проверяем точное совпадение для некоторых важных категорий 
    if category.lower() == "планиметрия" or category.lower() == "стереометрия":
        return True
    
    # Если задано условие задачи, проверяем наличие ключевых слов, указывающих на необходимость визуализации
    if original_task:
        visualization_keywords = [
            "на рисунке", "изображен", "изображён", "на графике", "в системе координат",
            "треугольник", "окружность", "прямоугольник", "трапеция", "параллелограмм",
            "ромб", "квадрат", "плоскость", "график", "функция"
        ]
        
        for keyword in visualization_keywords:
            if keyword.lower() in original_task.lower():
                return True
    
    return False


#############################################################
# 6. ВИЗУАЛИЗАЦИЯ И ДРУГИЕ ФУНКЦИИ
#############################################################

# Параметры по умолчанию для фигур
DEFAULT_VISUALIZATION_PARAMS = {
    "triangle": {
        "points": [(0,0), (4,0), (2,3)],
        "show_labels": True,
        "vertex_labels": ["A", "B", "C"],
        "sides": ["-", "-", "-"],  # Длины сторон для отображения, "-" если не указано
        "angles": ["-", "-", "-"],  # Значения углов в градусах, "-" если не указано
        "show_heights": False,
        "height_values": ["-", "-", "-"],  # Значения высот, "-" если не указано
        "show_medians": False,
        "median_values": ["-", "-", "-"],  # Значения медиан, "-" если не указано
        "show_midlines": False,
        "show_angle_bisectors": False,
        "bisector_vertices": [],  # Из каких вершин проводятся биссектрисы
        "bisector_values": ["-", "-", "-"],  # Значения биссектрис, "-" если не указано
        "is_right": False  # Является ли треугольник прямоугольным
    },
    "rectangle": {
        "x": 0,
        "y": 0,
        "width": 4,
        "height": 3,
        "show_labels": True,
        "vertex_labels": ["A", "B", "C", "D"],
        "sides": None,  # Какие стороны подписать
        "show_lengths": False,
        "show_angles": False,
        "show_diagonals": False,  # Показывать диагонали
        "diagonals_length": None  # Длины диагоналей
    },
    "parallelogram": {
        "x": 0,
        "y": 0,
        "width": 4,
        "height": 3,
        "skew": 60,
        "show_labels": True,
        "vertex_labels": ["A", "B", "C", "D"],
        "sides": None,  # Длины сторон
        "angles": None,  # Значения углов в градусах
        "show_lengths": False,
        "show_angles": False,
        "show_diagonals": False  # Показывать диагонали
    },
    "trapezoid": {
        "x": 0,
        "y": 0,
        "bases": [6, 3],  # [нижнее, верхнее]
        "height": 3,
        "show_labels": True,
        "vertex_labels": ["A", "B", "C", "D"],
        "sides": [3.6, 3.6],  # Длины боковых сторон [левая, правая]
        "angles": None,  # Величины углов в градусах
        "show_lengths": False,
        "show_angles": False,
        "show_height": False,  # Показать высоту трапеции
        "height_value": None,  # Числовое значение высоты для отображения
        "show_midline": False,  # Показать среднюю линию
        "midline_value": None  # Значение средней линии для отображения
    },
    "circle": {
        "center": (0, 0),
        "radius": 3,
        "center_label": "O",
        "show_center": True,
        "show_radius": False,
        "show_diameter": False,
        "show_chord": False,
        "radius_value": None,  # Значение радиуса для отображения
        "diameter_value": None,  # Значение диаметра для отображения
        "chord_value": None,  # Значение хорды для отображения
        "show_central_angles": False,
        "central_angle_value": None,  # Значение центрального угла в градусах
        "show_inscribed_angles": False,
        "inscribed_angle_value": None,  # Значение вписанного угла в градусах
        "show_tangent": False,
        "tangent_point": None  # Точка касания
    },
    "graph": {
        "num_functions": 1,
        "function_1": "x**2",
        "color_1": "blue",
        "name_1": "f(x)",
        "function_2": None,
        "color_2": "red",
        "name_2": "g(x)",
        "function_3": None,
        "color_3": "green",
        "name_3": "h(x)",
        "function_4": None,
        "color_4": "orange",
        "name_4": "k(x)",
        "x_range": [-10, 10],
        "y_range": None,  # Автоматический диапазон
        "special_points": []  # Список особых точек [(x1,y1,метка1), ...]
    },
    "coordinate": {
        "points": [],  # Список точек [(x1,y1,метка1), ...]
        "vectors": [],  # Список векторов [(x1,y1,x2,y2,метка), ...]
        "functions": []  # Список функций для отображения
    }
}

# Шаблоны регулярных выражений для извлечения параметров из текста
REGEX_PATTERNS = {
    "generic": {
        "type": r'Тип[^:]*:\s*([^\n\[\]]+)',
        "shape_type": r'Тип[^:]*:\s*([^\n\[\]]+)', 
    },
    "triangle": {
        "vertex_labels": r'Метки вершин[^:]*:\s*\[([^\]]*)\]',
        "sides": r'Стороны[^:]*:\s*\[([^\]]*)\]',
        "angles": r'Углы[^:]*:\s*\[([^\]]*)\]',
        "show_heights": r'Показать высоты[^:]*:\s*\[?([^\]\n]*)\]?',
        "show_medians": r'Показать медианы[^:]*:\s*\[?([^\]\n]*)\]?',
        "show_midlines": r'Показать средние линии[^:]*:\s*\[?([^\]\n]*)\]?',
        "is_right": r'Прямоугольный[^:]*:\s*\[?([^\]\n]*)\]?',
        "coords": r'Координаты вершин[^:]*:\s*\[([^\]]*)\]',
        "show_labels": r'Показать метки[^:]*:\s*\[?([^\]\n]*)\]?',
        "show_bisectors": r'Показать биссектрисы[^:]*:\s*\[?([^\]\n]*)\]?',
        "bisector_values": r'Значения биссектрис[^:]*:\s*\[([^\]]*)\]'
    },
    "rectangle": {
        "dimensions": r'Размеры[^:]*:\s*\[([^\]]*)\]',
        "vertex_labels": r'Метки вершин[^:]*:\s*\[([^\]]*)\]',
        "sides": r'Стороны[^:]*:\s*\[([^\]]*)\]',
        "coords": r'Координаты[^:]*:\s*\[([^\]]*)\]',
        "show_dimensions": r'Показать размеры[^:]*:\s*\[?([^\]\n]*)\]?',
        "show_labels": r'Показать метки[^:]*:\s*\[?([^\]\n]*)\]?',
        "side_lengths": r'Длины сторон[^:]*:\s*\[([^\]]*)\]',
        "show_angles": r'Показать углы[^:]*:\s*\[?([^\]\n]*)\]?',
        "angle_values": r'Значения углов[^:]*:\s*\[([^\]]*)\]',
        "show_lengths": r'Показать стороны[^:]*:\s*\[?([^\]\n]*)\]?',
        "show_diagonals": r'Показать диагонали[^:]*:\s*\[?([^\]\n]*)\]?',
        "diagonals_length": r'Длины диагоналей[^:]*:\s*\[([^\]]*)\]'
    },
    "parallelogram": {
        "dimensions": r'Размеры[^:]*:\s*\[([^\]]*)\]',
        "vertex_labels": r'Метки вершин[^:]*:\s*\[([^\]]*)\]',
        "sides": r'Стороны[^:]*:\s*\[([^\]]*)\]',
        "angles": r'Углы[^:]*:\s*\[([^\]]*)\]',
        "coords": r'Координаты[^:]*:\s*\[([^\]]*)\]',
        "show_labels": r'Показать метки[^:]*:\s*\[?([^\]\n]*)\]?',
        "skew_angle": r'Наклон[^:]*:\s*\[?([^\]\n]*)\]?',
        "show_angles": r'Показать углы[^:]*:\s*\[?([^\]\n]*)\]?',
        "angle_values": r'Значения углов[^:]*:\s*\[([^\]]*)\]',
        "show_lengths": r'Показать стороны[^:]*:\s*\[?([^\]\n]*)\]?',
        "show_diagonals": r'Показать диагонали[^:]*:\s*\[?([^\]\n]*)\]?',
        "diagonals_length": r'Длины диагоналей[^:]*:\s*\[([^\]]*)\]'
    },
    "trapezoid": {
        "bases": r'Основания[^:]*:\s*\[([^\]]*)\]',
        "height": r'Высота[^:]*:\s*\[?([^\]\n]*)\]?',
        "vertex_labels": r'Метки вершин[^:]*:\s*\[([^\]]*)\]',
        "sides": r'Боковые стороны[^:]*:\s*\[([^\]]*)\]',
        "angles": r'Углы[^:]*:\s*\[([^\]]*)\]',
        "coords": r'Координаты[^:]*:\s*\[([^\]]*)\]',
        "show_labels": r'Показать метки[^:]*:\s*\[?([^\]\n]*)\]?',
        "show_angles": r'Показать углы[^:]*:\s*\[?([^\]\n]*)\]?',
        "angle_values": r'Значения углов[^:]*:\s*\[([^\]]*)\]',
        "show_lengths": r'Показать стороны[^:]*:\s*\[?([^\]\n]*)\]?',
        "show_height": r'Показать высоту[^:]*:\s*\[?([^\]\n]*)\]?',
        "height_value": r'Значение высоты[^:]*:\s*\[?([^\]\n]*)\]?',
        "show_midline": r'Показать среднюю линию[^:]*:\s*\[?([^\]\n]*)\]?',
        "midline_value": r'Значение средней линии[^:]*:\s*\[?([^\]\n]*)\]?'
    },
    "circle": {
        "radius": r'Радиус[^:]*:\s*\[?([^\]\n]*)\]?',
        "center": r'Центр[^:]*:\s*\[([^\]]*)\]',
        "center_label": r'Метка центра[^:]*:\s*\[?([^\]\n]*)\]?',
        "show_radius": r'Показать радиус[^:]*:\s*\[?([^\]\n]*)\]?',
        "show_diameter": r'Показать диаметр[^:]*:\s*\[?([^\]\n]*)\]?',
        "show_chord": r'Показать хорду[^:]*:\s*\[?([^\]\n]*)\]?',
        "radius_value": r'Значение радиуса[^:]*:\s*\[?([^\]\n]*)\]?',
        "diameter_value": r'Значение диаметра[^:]*:\s*\[?([^\]\n]*)\]?',
        "chord_value": r'Значение хорды[^:]*:\s*\[?([^\]\n]*)\]?',
        "show_center": r'Показать центр[^:]*:\s*\[?([^\]\n]*)\]?',
        "show_central_angles": r'Показать центральные углы[^:]*:\s*\[?([^\]\n]*)\]?',
        "central_angle_value": r'Значение центрального угла[^:]*:\s*\[?([^\]\n]*)\]?',
        "show_inscribed_angles": r'Показать вписанные углы[^:]*:\s*\[?([^\]\n]*)\]?',
        "inscribed_angle_value": r'Значение вписанного угла[^:]*:\s*\[?([^\]\n]*)\]?',
        "show_tangent": r'Показать касательную[^:]*:\s*\[?([^\]\n]*)\]?',
        "tangent_point": r'Точка касания[^:]*:\s*\[?([^\]\n]*)\]?'
    },
    "graph": {
        "num_functions": r'Количество функций[^:]*:\s*\[?(\d+)\]?',
        "function_1": r'Функция 1[^:]*:\s*\[?([^\]\n]*)\]?',
        "color_1": r'Цвет 1[^:]*:\s*\[?([^\]\n]*)\]?',
        "name_1": r'Название 1[^:]*:\s*\[?([^\]\n]*)\]?',
        "function_2": r'Функция 2[^:]*:\s*\[?([^\]\n]*)\]?',
        "color_2": r'Цвет 2[^:]*:\s*\[?([^\]\n]*)\]?',
        "name_2": r'Название 2[^:]*:\s*\[?([^\]\n]*)\]?',
        "function_3": r'Функция 3[^:]*:\s*\[?([^\]\n]*)\]?',
        "color_3": r'Цвет 3[^:]*:\s*\[?([^\]\n]*)\]?',
        "name_3": r'Название 3[^:]*:\s*\[?([^\]\n]*)\]?',
        "function_4": r'Функция 4[^:]*:\s*\[?([^\]\n]*)\]?',
        "color_4": r'Цвет 4[^:]*:\s*\[?([^\]\n]*)\]?',
        "name_4": r'Название 4[^:]*:\s*\[?([^\]\n]*)\]?',
        "x_range": r'Диапазон X[^:]*:\s*\[([^\]]*)\]',
        "y_range": r'Диапазон Y[^:]*:\s*\[([^\]]*)\]',
        "special_points": r'Особые точки[^:]*:\s*\[([^\]]*)\]'
    },
    "coordinate": {
        "points": r'Точки[^:]*:\s*\[([^\]]*)\]',
        "vectors": r'Векторы[^:]*:\s*\[([^\]]*)\]',
        "functions": r'Функции[^:]*:\s*\[([^\]]*)\]'
    }
}   